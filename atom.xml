<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Twitch&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://twitchf.xyz/"/>
  <updated>2018-02-23T09:46:27.215Z</updated>
  <id>http://twitchf.xyz/</id>
  
  <author>
    <name>木木</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>openresty入门</title>
    <link href="http://twitchf.xyz/2018/02/23/openresty%E5%85%A5%E9%97%A8/"/>
    <id>http://twitchf.xyz/2018/02/23/openresty入门/</id>
    <published>2018-02-23T09:08:32.000Z</published>
    <updated>2018-02-23T09:46:27.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</span><br><span class="line">sudo yum install openresty</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>nginx conf添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      default_type text/html;</span><br><span class="line">     # content_by_lua &apos;</span><br><span class="line">     #   ngx.say(&quot;hello world&quot;)</span><br><span class="line">     # &apos;;</span><br><span class="line">      content_by_lua_file /usr/local/openresty/nginx/conf/vhosts/lua/hello.lua;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /get_random_string &#123;</span><br><span class="line">      default_type text/html;</span><br><span class="line">      content_by_lua_file /usr/local/openresty/nginx/conf/vhosts/lua/get_random_string.lua;</span><br><span class="line">    &#125;</span><br><span class="line">    location /decode_info &#123;</span><br><span class="line">      default_type text/html;</span><br><span class="line">      content_by_lua_file /usr/local/openresty/nginx/conf/vhosts/lua/decode_info.lua;</span><br><span class="line">    &#125;</span><br><span class="line">    location /redis &#123;</span><br><span class="line">      default_type text/html;</span><br><span class="line">      content_by_lua_file /usr/local/openresty/nginx/conf/vhosts/lua/redis.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>hello.lua</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx.say(&quot;hello world&quot;)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vhosts]# curl http://192.168.102.227:8080/hello </span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="获取get参数"><a href="#获取get参数" class="headerlink" title="获取get参数"></a>获取get参数</h3><p>get_random_string.lua</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">local args = ngx.req.get_uri_args()</span><br><span class="line">local salt = args.salt</span><br><span class="line">if not salt then</span><br><span class="line">    ngx.exit(ngx.HTTP_BAD_REQUEST)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local string = ngx.md5(ngx.time() .. salt)</span><br><span class="line">ngx.say(string)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vhosts]# curl http://192.168.102.227:8080/get_random_string -i</span><br><span class="line">HTTP/1.1 400 Bad Request</span><br><span class="line">Server: openresty/1.13.6.1</span><br><span class="line">Date: Fri, 23 Feb 2018 09:20:42 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 179</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.1&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@localhost vhosts]# curl http://192.168.102.227:8080/get_random_string?salt=test -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: openresty/1.13.6.1</span><br><span class="line">Date: Fri, 23 Feb 2018 09:20:50 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">387d778a137a586b3088ffd7e75d7e24</span><br></pre></td></tr></table></figure><h3 id="返回json数据"><a href="#返回json数据" class="headerlink" title="返回json数据"></a>返回json数据</h3><p>获取post的base64数据，解密并返回json</p><p>decode_info.lua</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">local json = require &quot;cjson&quot; --包引入</span><br><span class="line"></span><br><span class="line">ngx.req.read_body()</span><br><span class="line">local args = ngx.req.get_post_args()</span><br><span class="line"></span><br><span class="line">if not args or not args.info then</span><br><span class="line">    ngx.exit(ngx.HTTP_BAD_REQUEST)</span><br><span class="line">end</span><br><span class="line">local client_ip = ngx.var.remote_addr --获取客户端ip</span><br><span class="line">local user_agent = ngx.req.get_headers()[&apos;user-agent&apos;] or &apos;&apos; --获取客户端</span><br><span class="line">local info = ngx.decode_base64(args.info) --获取传入的base64参数</span><br><span class="line"></span><br><span class="line">local response = &#123;&#125;</span><br><span class="line">response.info = info</span><br><span class="line">response.ip = client_ip</span><br><span class="line">response.user_agent = user_agent</span><br><span class="line"></span><br><span class="line">ngx.say(json.encode(response))</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vhosts]# curl -i --data &apos;info=dGVzdA==&apos; http://192.168.102.227:8080/decode_info</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: openresty/1.13.6.1</span><br><span class="line">Date: Fri, 23 Feb 2018 09:44:04 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;&quot;info&quot;:&quot;test&quot;,&quot;ip&quot;:&quot;192.168.102.227&quot;,&quot;user_agent&quot;:&quot;curl\/7.29.0&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">local redis = require &quot;resty.redis&quot; --引入redis</span><br><span class="line">local red = redis:new()</span><br><span class="line"></span><br><span class="line">red:set_timeout(1000) --1sec</span><br><span class="line"></span><br><span class="line">--connect to redis</span><br><span class="line">local ok, err = red:connect(&quot;127.0.0.1&quot;, 6379)</span><br><span class="line"></span><br><span class="line">if not ok then</span><br><span class="line">    ngx.say(&quot;fail to connect to redis: &quot;, err)</span><br><span class="line">    ngx.exit(ngx.HTTP_BAD_REQUEST)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">--set a key dog</span><br><span class="line">ok, err = red:set(&quot;dog&quot;, &quot;an animal&quot;)</span><br><span class="line">if not ok then</span><br><span class="line">    ngx.say(&quot;fail to set dog&quot;, err)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.say(&quot;set result: &quot;, ok)</span><br><span class="line"></span><br><span class="line">--get from redis</span><br><span class="line">local res, err = red:get(&quot;dog&quot;)</span><br><span class="line"></span><br><span class="line">if not res then</span><br><span class="line">    ngx.say(&quot;fail to get dog: &quot;, err)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if res == null then</span><br><span class="line">    ngx.say(&quot;dog not found&quot;)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.say(&quot;dog: &quot;, res)</span><br><span class="line"></span><br><span class="line">red:init_pipeline() --初始化</span><br><span class="line">red:set(&quot;cat&quot;, &quot;Tom&quot;)</span><br><span class="line">red:set(&quot;mouse&quot;, &quot;Jerry&quot;)</span><br><span class="line">red:get(&quot;cat&quot;)</span><br><span class="line">red:get(&quot;mouse&quot;)</span><br><span class="line"></span><br><span class="line">local results, err = red:commit_pipeline()</span><br><span class="line"></span><br><span class="line">if not results then</span><br><span class="line">    ngx.say(&quot;failed to commit pipeline requests: &quot;, err)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">for i, res in ipairs(results) do</span><br><span class="line">    if type(res) == &quot;table&quot; then</span><br><span class="line">        if res[1] == false then</span><br><span class="line">            ngx.say(&quot;failed to run command&quot;, i, &quot;: &quot;, res[2])</span><br><span class="line">        else</span><br><span class="line">            ngx.say(res[1], &quot;: &quot;, res[2])</span><br><span class="line">        end</span><br><span class="line">    else</span><br><span class="line">        ngx.say(i, &quot;: &quot;, res)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- put it into the connection pool of size 100,</span><br><span class="line">-- with 10 seconds max idle time</span><br><span class="line">local ok, err = red:set_keepalive(10000, 100)</span><br><span class="line">if not ok then</span><br><span class="line">    ngx.say(&quot;failed to set keepalive: &quot;, err)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- or just close the connection right away:</span><br><span class="line">-- local ok, err = red:close()</span><br><span class="line">-- if not ok then</span><br><span class="line">--     ngx.say(&quot;failed to close: &quot;, err)</span><br><span class="line">--     return</span><br><span class="line">-- end</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vhosts]# curl http://192.168.102.227:8080/redis</span><br><span class="line">set result: OK</span><br><span class="line">dog: an animal</span><br><span class="line">1: OK  #set</span><br><span class="line">2: OK  #set</span><br><span class="line">3: Tom</span><br><span class="line">4: Jerry</span><br></pre></td></tr></table></figure><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>待补充。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install yum-utils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install openresty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux" scheme="http://twitchf.xyz/categories/linux/"/>
    
    
      <category term="nginx" scheme="http://twitchf.xyz/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>lua入门</title>
    <link href="http://twitchf.xyz/2018/02/23/lua%E5%85%A5%E9%97%A8/"/>
    <id>http://twitchf.xyz/2018/02/23/lua入门/</id>
    <published>2018-02-23T09:08:16.000Z</published>
    <updated>2018-02-23T09:10:24.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www.lua.org/ftp/lua-5.2.3.tar.gz</span><br><span class="line">$ tar zxf lua-5.2.3.tar.gz</span><br><span class="line">$ cd lua-5.2.3</span><br><span class="line">$ make linux test</span><br></pre></td></tr></table></figure><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><ul><li><p>数据类型</p><p>| 数据类型     | 描述                                       |<br>| ——– | —————————————- |<br>| nil      | 这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。 |<br>| boolean  | 包含两个值：false和true。                        |<br>| number   | 表示双精度类型的实浮点数                             |<br>| string   | 字符串由一对双引号或单引号来表示                         |<br>| function | 由 C 或 Lua 编写的函数                          |<br>| userdata | 表示任意存储在变量中的C数据结构                         |<br>| thread   | 表示执行的独立线路，用于执行协同程序                       |<br>| table    | Lua 中的表（table）其实是一个”关联数组”（associativearrays），数组的索引可以是数字或者是字符串。在Lua里，table的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。 |</p></li></ul><a id="more"></a><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">a = 1 --全局</span><br><span class="line">local b = 2 --局部</span><br><span class="line"></span><br><span class="line">function func1()</span><br><span class="line">    c = 3</span><br><span class="line">    local d = 4</span><br><span class="line">    local e = 5</span><br><span class="line">    print(e)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">nil</span><br></pre></td></tr></table></figure><ul><li>table<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">local corp = &#123;</span><br><span class="line">    web = &quot;www.google.com&quot;,   --索引为字符串，key = &quot;web&quot;,</span><br><span class="line">                              --            value = &quot;www.google.com&quot;</span><br><span class="line">    telephone = &quot;12345678&quot;,   --索引为字符串</span><br><span class="line">    staff = &#123;&quot;Jack&quot;, &quot;Scott&quot;, &quot;Gary&quot;&#125;, --索引为字符串，值也是一个表</span><br><span class="line">    100876,              --相当于 [1] = 100876，此时索引为数字</span><br><span class="line">                         --      key = 1, value = 100876</span><br><span class="line">    100191,              --相当于 [2] = 100191，此时索引为数字</span><br><span class="line">    [10] = 360,          --直接把数字索引给出</span><br><span class="line">    [&quot;city&quot;] = &quot;Beijing&quot; --索引为字符串</span><br><span class="line">&#125;</span><br><span class="line">print(corp.web)           #www.google.com</span><br><span class="line">print(corp.telephone)       #12345678</span><br><span class="line">print(corp[&apos;telephone&apos;])      #12345678</span><br><span class="line">print(corp[&apos;staff&apos;])         #table: 0x4130dec8</span><br><span class="line">print(corp.staff[1])  #jack</span><br><span class="line">print(corp[10])          #360</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>定义<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function function_name(args)</span><br><span class="line">   someting</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function_name = function(args)</span><br><span class="line">    something</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul><h3 id="待补充。。。"><a href="#待补充。。。" class="headerlink" title="待补充。。。"></a>待补充。。。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget http://www.lua.org/ftp/lua-5.2.3.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tar zxf lua-5.2.3.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd lua-5.2.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ make linux test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据类型&lt;/p&gt;
&lt;p&gt;| 数据类型     | 描述                                       |&lt;br&gt;| ——– | —————————————- |&lt;br&gt;| nil      | 这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。 |&lt;br&gt;| boolean  | 包含两个值：false和true。                        |&lt;br&gt;| number   | 表示双精度类型的实浮点数                             |&lt;br&gt;| string   | 字符串由一对双引号或单引号来表示                         |&lt;br&gt;| function | 由 C 或 Lua 编写的函数                          |&lt;br&gt;| userdata | 表示任意存储在变量中的C数据结构                         |&lt;br&gt;| thread   | 表示执行的独立线路，用于执行协同程序                       |&lt;br&gt;| table    | Lua 中的表（table）其实是一个”关联数组”（associativearrays），数组的索引可以是数字或者是字符串。在Lua里，table的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。 |&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="linux" scheme="http://twitchf.xyz/categories/linux/"/>
    
    
      <category term="lua" scheme="http://twitchf.xyz/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>nginx入门</title>
    <link href="http://twitchf.xyz/2018/02/23/nginx%E5%85%A5%E9%97%A8/"/>
    <id>http://twitchf.xyz/2018/02/23/nginx入门/</id>
    <published>2018-02-23T05:38:12.000Z</published>
    <updated>2018-02-23T05:44:09.824Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><ul><li><strong>Master进程负责</strong><ol><li>调用各module的初始化函数，读取解析nginx配置文件，模块module 解析执行 nginx.conf 配置文件流程分析 ；</li><li>充当整个进程组与用户的交互接口，接收用户操作信号管理worker进程，nginx核心进程模型</li></ol></li><li><strong>Worker进程负责</strong><ol><li>抢占进程锁，从监听套接字中获取客户端连接，实现负载均衡；</li><li>接收客户端套接字的数据，传递给upstream（如果有upstream），则否返回静态文件；</li><li>接收并处理Master套接字中的交互命令。</li></ol></li></ul><a id="more"></a><ul><li><p>异步非阻塞</p></li><li><p>connection</p><ul><li>nginx中connection就是对tcp连接的封装，其中包括连接的socket，读事件，写事件。</li></ul></li><li><p>request</p><ul><li><p>在nginx中我们指的是http请求，具体到nginx中的数据结构是ngx_http_request_t。ngx_http_request_t是对一个http请求的封装。 我们知道，一个http请求，包含请求行、请求头、请求体、响应行、响应头、响应体。</p><p><img src="http://twitchf.xyz/images/upload/ngx_request.png" alt="ngx_request"></p></li></ul></li><li><p><strong>keepalive</strong></p></li><li><p>pipe</p><ul><li>如果客户端要提交多个请求，对于keepalive来说，那么第二个请求，必须要等到第一个请求的响应接收完全后，才能发起，这和TCP的停止等待协议是一样的，得到两个响应的时间至少为2<em>RTT。而对pipeline来说，客户端不必等到第一个请求处理完后，就可以马上发起第二个请求。得到两个响应的时间可能能够达到1\</em>RTT。</li></ul></li><li><p><strong>lingering_close</strong></p><ul><li>字面意思就是延迟关闭，也就是说，当nginx要关闭连接时，并非立即关闭连接，而是先关闭tcp连接的写，再等待一段时间后再关掉连接的读。</li></ul></li><li><p><strong>配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main:nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。</span><br><span class="line">http:与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</span><br><span class="line">server:http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server.每个server通过监听的地址来区分。</span><br><span class="line">location:http服务中，某些特定的URL对应的一系列配置项。</span><br><span class="line">mail:实现email相关的SMTP/IMAP/POP3代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</span><br></pre></td></tr></table></figure><p>存在于main上下文中的配置指令如下:</p><ul><li>user</li><li>worker_processes</li><li>error_log</li><li>events</li><li>http</li><li>mail</li></ul><p>存在于http上下文中的指令如下:</p><ul><li>server</li></ul><p>存在于mail上下文中的指令如下：</p><ul><li>server</li><li>auth_http</li><li>imap_capabilities</li></ul><p>存在于server上下文中的配置指令如下：</p><ul><li>listen</li><li>server_name</li><li>access_log</li><li>location</li><li>protocol</li><li>proxy</li><li>smtp_auth</li><li>xclient</li></ul><p>存在于location上下文中的指令如下：</p><ul><li>index</li><li>root</li></ul></li></ul><h4 id="2、location-匹配规则"><a href="#2、location-匹配规则" class="headerlink" title="2、location 匹配规则"></a>2、location 匹配规则</h4><ul><li><p>语法规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location [=|~|~*|^~] /uri/ &#123; … &#125;</span><br><span class="line">模式含义</span><br><span class="line">location = /uri= 表示精确匹配，只有完全匹配上才能生效</span><br><span class="line">location ^~ /uri^~ 开头对URL路径进行前缀匹配，并且在正则之前。</span><br><span class="line">location ~ pattern开头表示区分大小写的正则匹配</span><br><span class="line">location ~* pattern开头表示不区分大小写的正则匹配</span><br><span class="line">location /uri不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</span><br><span class="line">location /通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default</span><br><span class="line">前缀匹配时，Nginx 不对 url 做编码，因此请求为 /static/20%/aa，可以被规则 ^~ /static/ /aa 匹配到（注意是空格）</span><br><span class="line">多个 location 配置的情况下匹配顺序为（参考资料而来，还未实际验证，试试就知道了，不必拘泥，仅供参考）:</span><br><span class="line">首先精确匹配 =</span><br><span class="line">其次前缀匹配 ^~</span><br><span class="line">其次是按文件中顺序的正则匹配</span><br><span class="line">然后匹配不带任何修饰的前缀匹配。</span><br><span class="line">最后是交给 / 通用匹配</span><br><span class="line">当有匹配成功时候，停止匹配，按当前匹配规则处理请求</span><br><span class="line">注意：前缀匹配，如果有包含关系时，按最大匹配原则进行匹配。比如在前缀匹配：location /dir01 与 location /dir01/dir02，如有请求 http://localhost/dir01/dir02/file 将最终匹配到 location /dir01/dir02</span><br></pre></td></tr></table></figure></li><li><p>例子，有如下匹配规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">   echo &quot;规则A&quot;;</span><br><span class="line">&#125;</span><br><span class="line">location = /login &#123;</span><br><span class="line">   echo &quot;规则B&quot;;</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">   echo &quot;规则C&quot;;</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /static/files &#123;</span><br><span class="line">    echo &quot;规则X&quot;;</span><br><span class="line">&#125;</span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;</span><br><span class="line">   echo &quot;规则D&quot;;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.png$ &#123;</span><br><span class="line">   echo &quot;规则E&quot;;</span><br><span class="line">&#125;</span><br><span class="line">location /img &#123;</span><br><span class="line">    echo &quot;规则Y&quot;;</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">   echo &quot;规则F&quot;;</span><br><span class="line">&#125;</span><br><span class="line">那么产生的效果如下：</span><br><span class="line">访问根目录 /，比如 http://localhost/ 将匹配 规则A</span><br><span class="line">访问 http://localhost/login 将匹配 规则B，http://localhost/register 则匹配 规则F</span><br><span class="line">访问 http://localhost/static/a.html 将匹配 规则C</span><br><span class="line">访问 http://localhost/static/files/a.exe 将匹配 规则X，虽然 规则C 也能匹配到，但因为最大匹配原则，最终选中了 规则X。你可以测试下，去掉规则 X ，则当前 URL 会匹配上 规则C。</span><br><span class="line">访问 http://localhost/a.gif, http://localhost/b.jpg 将匹配 规则D 和 规则 E ，但是 规则 D 顺序优先，规则 E 不起作用，而 http://localhost/static/c.png 则优先匹配到 规则 C</span><br><span class="line">访问 http://localhost/a.PNG 则匹配 规则 E ，而不会匹配 规则 D ，因为 规则 E 不区分大小写。</span><br><span class="line">访问 http://localhost/img/a.gif 会匹配上 规则D,虽然 规则Y 也可以匹配上，但是因为正则匹配优先，而忽略了 规则Y。</span><br><span class="line">访问 http://localhost/img/a.tiff 会匹配上 规则Y。</span><br><span class="line">访问 http://localhost/category/id/1111 则最终匹配到规则 F ，因为以上规则都不匹配，这个时候应该是 Nginx 转发请求给后端应用服务器，比如 FastCGI（php），tomcat（jsp），Nginx 作为反向代理服务器存在。</span><br></pre></td></tr></table></figure></li><li><p>小结</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">所以实际使用中，笔者觉得至少有三个匹配规则定义，如下：</span><br><span class="line"># 直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span><br><span class="line"># 这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="line"># 第一个必选规则</span><br><span class="line">location = / &#123;</span><br><span class="line">    proxy_pass http://tomcat:8080/index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是 nginx 作为 http 服务器的强项</span><br><span class="line"># 有两种配置模式，目录匹配或后缀匹配，任选其一或搭配使用</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">    root /webroot/static/;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line">    root /webroot/res/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="line"># 非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class="line"># 毕竟目前的一些框架的流行，带.php、.jsp后缀的情况很少了</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://tomcat:8080/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、rewrite-语法"><a href="#3、rewrite-语法" class="headerlink" title="3、rewrite 语法"></a>3、rewrite 语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">last – 基本上都用这个 Flag</span><br><span class="line">break – 中止 Rewirte，不再继续匹配</span><br><span class="line">redirect – 返回临时重定向的 HTTP 状态 302</span><br><span class="line">permanent – 返回永久重定向的 HTTP 状态 301</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1、下面是可以用来判断的表达式：</span><br><span class="line">-f 和 !-f 用来判断是否存在文件</span><br><span class="line">-d 和 !-d 用来判断是否存在目录</span><br><span class="line">-e 和 !-e 用来判断是否存在文件或目录</span><br><span class="line">-x 和 !-x 用来判断文件是否可执行</span><br><span class="line">2、下面是可以用作判断的全局变量</span><br><span class="line">例：http://localhost:88/test1/test2/test.php?k=v</span><br><span class="line">$host：localhost</span><br><span class="line">$server_port：88</span><br><span class="line">$request_uri：/test1/test2/test.php?k=v</span><br><span class="line">$document_uri：/test1/test2/test.php</span><br><span class="line">$document_root：D:\nginx/html</span><br><span class="line">$request_filename：D:\nginx/html/test1/test2/test.php</span><br><span class="line">redirect 语法</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name start.igrow.cn;</span><br><span class="line">    index index.html index.php;</span><br><span class="line">    root html;</span><br><span class="line">    if ($http_host !~ &quot;^star\.igrow\.cn$&quot;) &#123;</span><br><span class="line">        rewrite ^(.*) http://star.igrow.cn$1 redirect;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">防盗链</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|swf)$ &#123;</span><br><span class="line">    valid_referers none blocked start.igrow.cn sta.igrow.cn;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">       rewrite ^/ http://$host/logo.png;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">根据文件类型设置过期时间</span><br><span class="line"></span><br><span class="line">location ~* \.(js|css|jpg|jpeg|gif|png|swf)$ &#123;</span><br><span class="line">    if (-f $request_filename) &#123;</span><br><span class="line">        expires 1h;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">禁止访问某个目录</span><br><span class="line"></span><br><span class="line">location ~* \.(txt|doc)$&#123;</span><br><span class="line">    root /data/www/wwwroot/linuxtone/test;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些可用的全局变量，可以参考<a href="https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/inline_var.html" target="_blank" rel="noopener">获取 Nginx 内置绑定变量</a>章节。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; class=&quot;headerlink&quot; title=&quot;nginx&quot;&gt;&lt;/a&gt;nginx&lt;/h3&gt;&lt;h4 id=&quot;1、介绍&quot;&gt;&lt;a href=&quot;#1、介绍&quot; class=&quot;headerlink&quot; title=&quot;1、介绍&quot;&gt;&lt;/a&gt;1、介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Master进程负责&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;调用各module的初始化函数，读取解析nginx配置文件，模块module 解析执行 nginx.conf 配置文件流程分析 ；&lt;/li&gt;
&lt;li&gt;充当整个进程组与用户的交互接口，接收用户操作信号管理worker进程，nginx核心进程模型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worker进程负责&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;抢占进程锁，从监听套接字中获取客户端连接，实现负载均衡；&lt;/li&gt;
&lt;li&gt;接收客户端套接字的数据，传递给upstream（如果有upstream），则否返回静态文件；&lt;/li&gt;
&lt;li&gt;接收并处理Master套接字中的交互命令。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="linux" scheme="http://twitchf.xyz/categories/linux/"/>
    
    
      <category term="nginx lua" scheme="http://twitchf.xyz/tags/nginx-lua/"/>
    
  </entry>
  
  <entry>
    <title>mongodb副本集集群搭建记录</title>
    <link href="http://twitchf.xyz/2018/01/30/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>http://twitchf.xyz/2018/01/30/mongodb副本集集群搭建记录/</id>
    <published>2018-01-30T10:05:55.000Z</published>
    <updated>2018-01-30T10:35:55.150Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>MongoDB 副本集（Replica Set）是有自动故障恢复功能的主从集群，有一个Primary节点和一个或多个Secondary节点组成。</p><p><img src="http://twitchf.xyz/images/upload/replica-set-read-write-operations-primary.png" alt="架构图"></p><p>同步简单说明：</p><p>1：检查自己local库的oplog.rs集合找出最近的时间戳。<br>2：检查Primary节点local库oplog.rs集合，找出大于此时间戳的记录。<br>3：将找到的记录插入到自己的oplog.rs集合中，并执行这些操作</p><p> 注意：在副本集的环境中，要是所有的Secondary都宕机了，只剩下Primary。最后Primary会变成Secondary，不能提供服务。所以副本集至少为3台机器。</p><a id="more"></a><h3 id="机器准备"><a href="#机器准备" class="headerlink" title="机器准备"></a>机器准备</h3><table><thead><tr><th>Hostname</th><th>机器</th><th>服务</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>mongodb-master</td><td>172.18.199.112</td><td>mongodb-master</td><td>主节点 2C8G 200G</td><td></td></tr><tr><td>mongodb-slave117</td><td>172.18.199.117</td><td>mongodb-slave</td><td>从节点 2C8G 200G</td><td></td></tr><tr><td>mongodb-slave118</td><td>172.18.199.118</td><td>mongodb-slave</td><td>从节点 2C8G 200G</td></tr></tbody></table><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><ul><li><p>一个 主节点 </p></li><li><p>两个 从节点 ，这两个从节点都可以在 选举中 升职为主节点</p></li><li><p>版本 3.4.10</p></li><li><p>安装方式 yum</p></li><li><p>文件路径</p><ul><li>配置文件 /etc/mongod.conf</li><li>数据文件 /data/mongodb</li><li>日志文件 /var/log/mongodb/mongod.log</li></ul></li><li><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod.log</span><br><span class="line">  </span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongodb #数据存储目录</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  #守护进程启动</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod.pid  </span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017 </span><br><span class="line">  bindIp: 127.0.0.1,172.18.199.xx(112,117,118) #监听端口  </span><br><span class="line">  </span><br><span class="line">replication:</span><br><span class="line">  replSetName: prodrc #副本集名称</span><br><span class="line">  </span><br><span class="line">security:#集群间认证，开启密码验证</span><br><span class="line">  authorization: enabled</span><br><span class="line">  keyFile: /data/mongodb/keyfile/mongokey</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>配置yum源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/mongodb-3.4.repo  </span><br><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mongodb-org</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /etc/mongod.conf --httpinterface --fork --rest</span><br></pre></td></tr></table></figure></li></ul><h3 id="集群设置"><a href="#集群设置" class="headerlink" title="集群设置"></a>集群设置</h3><ul><li><p>在主节点上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongo&gt;rs.initiate() #副本集初始化</span><br><span class="line">prodrc:PRIMARY&gt; rs.add(&quot;172.18.199.117&quot;) #添加从节点</span><br><span class="line">prodrc:PRIMARY&gt; rs.add(&quot;172.18.199.118&quot;)</span><br></pre></td></tr></table></figure></li><li><p>各个节点查看状态,三台机器都ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">prodrc:PRIMARY&gt; rs.status() #查看状态</span><br><span class="line">&#123;</span><br><span class="line">&quot;set&quot; : &quot;prodrc&quot;,</span><br><span class="line">&quot;date&quot; : ISODate(&quot;2017-12-20T09:23:48.805Z&quot;),</span><br><span class="line">&quot;myState&quot; : 1,</span><br><span class="line">&quot;term&quot; : NumberLong(1),</span><br><span class="line">&quot;heartbeatIntervalMillis&quot; : NumberLong(2000),</span><br><span class="line">&quot;optimes&quot; : &#123;</span><br><span class="line">&quot;lastCommittedOpTime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1513761819, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;appliedOpTime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1513761819, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;durableOpTime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1513761819, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;members&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : 0,</span><br><span class="line">&quot;name&quot; : &quot;172.18.199.112:27017&quot;,</span><br><span class="line">&quot;health&quot; : 1,</span><br><span class="line">&quot;state&quot; : 1,</span><br><span class="line">&quot;stateStr&quot; : &quot;PRIMARY&quot;, #主节点</span><br><span class="line">&quot;uptime&quot; : 2073,</span><br><span class="line">&quot;optime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1513761819, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDate&quot; : ISODate(&quot;2017-12-20T09:23:39Z&quot;),</span><br><span class="line">&quot;electionTime&quot; : Timestamp(1513759797, 2),</span><br><span class="line">&quot;electionDate&quot; : ISODate(&quot;2017-12-20T08:49:57Z&quot;),</span><br><span class="line">&quot;configVersion&quot; : 3,</span><br><span class="line">&quot;self&quot; : true</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : 1,</span><br><span class="line">&quot;name&quot; : &quot;172.18.199.117:27017&quot;,</span><br><span class="line">&quot;health&quot; : 1,</span><br><span class="line">&quot;state&quot; : 2,</span><br><span class="line">&quot;stateStr&quot; : &quot;SECONDARY&quot;, #从节点</span><br><span class="line">&quot;uptime&quot; : 1872,</span><br><span class="line">&quot;optime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1513761819, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDurable&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1513761819, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDate&quot; : ISODate(&quot;2017-12-20T09:23:39Z&quot;),</span><br><span class="line">&quot;optimeDurableDate&quot; : ISODate(&quot;2017-12-20T09:23:39Z&quot;),</span><br><span class="line">&quot;lastHeartbeat&quot; : ISODate(&quot;2017-12-20T09:23:48.168Z&quot;),</span><br><span class="line">&quot;lastHeartbeatRecv&quot; : ISODate(&quot;2017-12-20T09:23:47.231Z&quot;),</span><br><span class="line">&quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">&quot;syncingTo&quot; : &quot;172.18.199.112:27017&quot;,</span><br><span class="line">&quot;configVersion&quot; : 3</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : 2,</span><br><span class="line">&quot;name&quot; : &quot;172.18.199.118:27017&quot;,</span><br><span class="line">&quot;health&quot; : 1,</span><br><span class="line">&quot;state&quot; : 2,</span><br><span class="line">&quot;stateStr&quot; : &quot;SECONDARY&quot;,  #从节点</span><br><span class="line">&quot;uptime&quot; : 1869,</span><br><span class="line">&quot;optime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1513761819, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDurable&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1513761819, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDate&quot; : ISODate(&quot;2017-12-20T09:23:39Z&quot;),</span><br><span class="line">&quot;optimeDurableDate&quot; : ISODate(&quot;2017-12-20T09:23:39Z&quot;),</span><br><span class="line">&quot;lastHeartbeat&quot; : ISODate(&quot;2017-12-20T09:23:48.168Z&quot;),</span><br><span class="line">&quot;lastHeartbeatRecv&quot; : ISODate(&quot;2017-12-20T09:23:47.226Z&quot;),</span><br><span class="line">&quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">&quot;syncingTo&quot; : &quot;172.18.199.112:27017&quot;,</span><br><span class="line">&quot;configVersion&quot; : 3</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从节点设置</p><p>默认从节点不允许写入，只允许读取，执行允许可读写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prodrc:SECONDARY&gt; rs.slaveOk()</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建集群认证"><a href="#创建集群认证" class="headerlink" title="创建集群认证"></a>创建集群认证</h3><ul><li><p>创建key文件</p><p>注意，三个节点必须要用同一份keyfile，在一台机器生成，拷贝到另外两台，并且修改成 600 的文件属性。</p><p>key用于集群间通信同步使用，若没有，则集群不可用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># openssl rand -base64 90 -out keyfile</span><br><span class="line"># cp keyfile /data/mongodb/keyfile/mongokey</span><br><span class="line"># chmod 600 /data/mongodb/keyfile/mongokey</span><br></pre></td></tr></table></figure><p>并且把这份keyfile同步到其他两个节点的/data/mongodb/keyfile/mongokey 文件夹中</p></li><li><p>关闭副本集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongo --port 27018</span><br><span class="line">replSet:PRIMARY&gt; use admin</span><br><span class="line">replSet:PRIMARY&gt; db.shutdownServer()</span><br></pre></td></tr></table></figure></li><li><p>配置文件添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br><span class="line">  keyFile: /data/mongodb/keyfile/mongokey  #之前启动集群是不带这段配置</span><br></pre></td></tr></table></figure></li><li><p>重启副本集群</p></li><li><p>添加admin账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;admin&quot;,</span><br><span class="line">    pwd: &quot;password&quot;,</span><br><span class="line">    roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>添加库账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;use xxdb</span><br><span class="line">&gt;db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">  user:&quot;mytest&quot;,</span><br><span class="line">  pwd:&quot;mytest&quot;,</span><br><span class="line">  roles:[&#123;role:&quot;dbOwner&quot;,db:&quot;mytest&quot;&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>登陆说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017 -u &quot;username&quot; -p &quot;password&quot; --authenticationDatabase &quot;admin&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://github.com/johnnian/Blog/issues/8" target="_blank" rel="noopener">https://github.com/johnnian/Blog/issues/8</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;MongoDB 副本集（Replica Set）是有自动故障恢复功能的主从集群，有一个Primary节点和一个或多个Secondary节点组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://twitchf.xyz/images/upload/replica-set-read-write-operations-primary.png&quot; alt=&quot;架构图&quot;&gt;&lt;/p&gt;
&lt;p&gt;同步简单说明：&lt;/p&gt;
&lt;p&gt;1：检查自己local库的oplog.rs集合找出最近的时间戳。&lt;br&gt;2：检查Primary节点local库oplog.rs集合，找出大于此时间戳的记录。&lt;br&gt;3：将找到的记录插入到自己的oplog.rs集合中，并执行这些操作&lt;/p&gt;
&lt;p&gt; 注意：在副本集的环境中，要是所有的Secondary都宕机了，只剩下Primary。最后Primary会变成Secondary，不能提供服务。所以副本集至少为3台机器。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://twitchf.xyz/categories/linux/"/>
    
    
      <category term="mongodb" scheme="http://twitchf.xyz/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>kafka集群搭建记录</title>
    <link href="http://twitchf.xyz/2018/01/29/kafka%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>http://twitchf.xyz/2018/01/29/kafka集群搭建记录/</id>
    <published>2018-01-29T09:36:22.000Z</published>
    <updated>2018-01-29T10:59:14.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kafka_2.10-0.10.1.0</span><br><span class="line">zookeeper-3.4.6</span><br><span class="line">jdk 1.8</span><br><span class="line">kafka-manager(用的以前的1.3.1，对kafka10.1支持的不是很好，但能用，最新移步https://github.com/yahoo/kafka-manager)</span><br></pre></td></tr></table></figure><h3 id="机器"><a href="#机器" class="headerlink" title="机器"></a>机器</h3><table><thead><tr><th>HOST</th><th>服务</th></tr></thead><tbody><tr><td>172.18.199.121</td><td>zk，kafka</td></tr><tr><td>172.18.199.124</td><td>zk，kafka</td></tr><tr><td>172.18.199.125</td><td>zk，kafka ，kafka-manager</td></tr></tbody></table><a id="more"></a><h3 id="zookeeper部署"><a href="#zookeeper部署" class="headerlink" title="zookeeper部署"></a>zookeeper部署</h3><ul><li>配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/data/zookeeper</span><br><span class="line">dataLogDir=/var/log/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">maxClientCnxns=600</span><br><span class="line">server.1=172.18.199.121:2888:3888</span><br><span class="line">server.2=172.18.199.124:2888:3888</span><br><span class="line">server.3=172.18.199.125:2888:3888</span><br></pre></td></tr></table></figure><ul><li>注意点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、日志路径提前建好</span><br><span class="line">2、myid文件提前准备</span><br><span class="line">[root@kafka125 ops]# cat /data/zookeeper/myid </span><br><span class="line">3</span><br><span class="line">我这里id分别为1，2，3</span><br></pre></td></tr></table></figure><ul><li>依次启动三台</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper-3.4.6/bin/zkServer.sh start /usr/local/zookeeper-3.4.6/conf/zoo.cfg #用自己的配置启动</span><br></pre></td></tr></table></figure><ul><li>检查2181端口启动了</li></ul><h3 id="kafka部署"><a href="#kafka部署" class="headerlink" title="kafka部署"></a>kafka部署</h3><ul><li>配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">broker.id=3  #broker id,三台机器分别为1，2，3</span><br><span class="line">port=9092 #端口</span><br><span class="line">host.name=172.18.199.125 #各个机器的ip</span><br><span class="line">num.network.threads=5</span><br><span class="line">num.io.threads=4</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/data/kafka #数据存放路径</span><br><span class="line">num.partitions=4  #分片数</span><br><span class="line">num.recovery.threads.per.data.dir=1 #副本</span><br><span class="line">default.replication.factor=3</span><br><span class="line">log.flush.interval.messages=10000</span><br><span class="line">log.flush.interval.ms=1000</span><br><span class="line">log.retention.hours=24 #数据保存的时间</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">log.cleaner.enable=true</span><br><span class="line">delete.topic.enable=true</span><br><span class="line">zookeeper.connect=172.18.199.125:2181,172.18.199.124:2181,172.18.199.121:2181 #zk</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br></pre></td></tr></table></figure><ul><li>依次启动三台</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka_2.10-0.10.1.0/bin/kafka-server-start.sh  /usr/local/kafka_2.10-0.10.1.0/config/server.properties &amp; #自己的配置文件</span><br></pre></td></tr></table></figure><h3 id="kafka-manager"><a href="#kafka-manager" class="headerlink" title="kafka-manager"></a>kafka-manager</h3><ul><li>配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">play.crypto.secret=&quot;secretofkafka&quot;</span><br><span class="line">play.crypto.secret=$&#123;?APPLICATION_SECRET&#125;</span><br><span class="line"></span><br><span class="line"># The application languages</span><br><span class="line"># ~~~~~</span><br><span class="line">play.i18n.langs=[&quot;en&quot;]</span><br><span class="line"></span><br><span class="line">play.http.requestHandler = &quot;play.http.DefaultHttpRequestHandler&quot;</span><br><span class="line">play.http.context = &quot;/&quot;</span><br><span class="line">play.application.loader=loader.KafkaManagerLoader</span><br><span class="line"></span><br><span class="line">kafka-manager.zkhosts=&quot;172.18.199.125:2181&quot; ##zk</span><br><span class="line">kafka-manager.zkhosts=$&#123;?ZK_HOSTS&#125;</span><br><span class="line">pinned-dispatcher.type=&quot;PinnedDispatcher&quot;</span><br><span class="line">pinned-dispatcher.executor=&quot;thread-pool-executor&quot;</span><br><span class="line">application.features=[&quot;KMClusterManagerFeature&quot;,&quot;KMTopicManagerFeature&quot;,&quot;KMPreferredReplicaElectionFeature&quot;,&quot;KMReassignPartitionsFeature&quot;]</span><br><span class="line"></span><br><span class="line">akka &#123;</span><br><span class="line">  loggers = [&quot;akka.event.slf4j.Slf4jLogger&quot;]</span><br><span class="line">  loglevel = &quot;ERROR&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">basicAuthentication.enabled=false</span><br><span class="line">basicAuthentication.username=&quot;admin&quot;</span><br><span class="line">basicAuthentication.password=&quot;fjf123&quot;</span><br><span class="line">basicAuthentication.realm=&quot;Kafka-Manager&quot;</span><br><span class="line">kafka-manager.consumer.properties.file=$&#123;?CONSUMER_PROPERTIES_FILE&#125;</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-manager -Dconfig.file=./conf/application.conf -Dhttp.port=9000 &amp; #9000端口</span><br></pre></td></tr></table></figure><ul><li><p>配置</p><p>访问 172.18.199.125:9000<br>添加集群</p><p><img src="http://twitchf.xyz/images/upload/kakfa-add.png" alt="网络"></p><p>​</p><p><img src="http://twitchf.xyz/images/upload/kafka-cluter.png" alt="网络"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kafka_2.10-0.10.1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zookeeper-3.4.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jdk 1.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kafka-manager(用的以前的1.3.1，对kafka10.1支持的不是很好，但能用，最新移步https://github.com/yahoo/kafka-manager)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;机器&quot;&gt;&lt;a href=&quot;#机器&quot; class=&quot;headerlink&quot; title=&quot;机器&quot;&gt;&lt;/a&gt;机器&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HOST&lt;/th&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;172.18.199.121&lt;/td&gt;
&lt;td&gt;zk，kafka&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;172.18.199.124&lt;/td&gt;
&lt;td&gt;zk，kafka&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;172.18.199.125&lt;/td&gt;
&lt;td&gt;zk，kafka ，kafka-manager&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="linux" scheme="http://twitchf.xyz/categories/linux/"/>
    
    
      <category term="kafka" scheme="http://twitchf.xyz/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>flannel安装注意点</title>
    <link href="http://twitchf.xyz/2018/01/27/flannel%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://twitchf.xyz/2018/01/27/flannel安装注意点/</id>
    <published>2018-01-27T05:41:47.000Z</published>
    <updated>2018-01-27T05:54:02.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flannel安装注意"><a href="#flannel安装注意" class="headerlink" title="flannel安装注意"></a>flannel安装注意</h3><p>完成flannel安装后，安装参考 <a href="https://k8s-install.opsnull.com/05-%E9%83%A8%E7%BD%B2Flannel%E7%BD%91%E7%BB%9C.html" target="_blank" rel="noopener">flannel安装</a></p><p>在启动docker前，需要将flannel的网关绑定到docker启动参数上</p><ul><li>启动flannel</li><li>查看flannel分配的网络参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#cat /run/flannel/subnet.env </span><br><span class="line">FLANNEL_NETWORK=172.30.0.0/16</span><br><span class="line">FLANNEL_SUBNET=172.30.45.1/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=false</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>创建Docker运行参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用flannel提供的脚本将subnet.env转写成Docker启动参数，创建好的启动参数位于/run/docker_opts.env文件中。</span><br><span class="line">#mk-docker-opts.sh -d /run/docker_opts.env -c</span><br><span class="line">#vim /lib/systemd/system/docker.service</span><br><span class="line">  ExecStart=/usr/bin/dockerd $DOCKER_OPTS</span><br><span class="line">  # 指定这些启动参数所在的文件位置(这个配置是新增的，同样放在Service标签下)</span><br><span class="line">  EnvironmentFile=/run/docker_opts.env</span><br></pre></td></tr></table></figure></li><li><p>重启docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#systemctl daemon-reload</span><br><span class="line">#systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>查看网络</p></li></ul><p><img src="http://twitchf.xyz/images/upload/flannel.png" alt="网络"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;flannel安装注意&quot;&gt;&lt;a href=&quot;#flannel安装注意&quot; class=&quot;headerlink&quot; title=&quot;flannel安装注意&quot;&gt;&lt;/a&gt;flannel安装注意&lt;/h3&gt;&lt;p&gt;完成flannel安装后，安装参考 &lt;a href=&quot;https://k8s-install.opsnull.com/05-%E9%83%A8%E7%BD%B2Flannel%E7%BD%91%E7%BB%9C.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flannel安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在启动docker前，需要将flannel的网关绑定到docker启动参数上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动flannel&lt;/li&gt;
&lt;li&gt;查看flannel分配的网络参数&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#cat /run/flannel/subnet.env &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FLANNEL_NETWORK=172.30.0.0/16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FLANNEL_SUBNET=172.30.45.1/24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FLANNEL_MTU=1450&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FLANNEL_IPMASQ=false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="docker" scheme="http://twitchf.xyz/categories/docker/"/>
    
    
      <category term="k8s" scheme="http://twitchf.xyz/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>ansible的一点点记录</title>
    <link href="http://twitchf.xyz/2018/01/25/ansible%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>http://twitchf.xyz/2018/01/25/ansible的一点点记录/</id>
    <published>2018-01-25T08:03:51.000Z</published>
    <updated>2018-01-25T08:10:02.609Z</updated>
    
    <content type="html"><![CDATA[<p>ansible 无需安装客户端，实现自动化分发<br>主要学习基本模块的使用，playbook的批量执行<br><a id="more"></a></p><h4 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h4><ul><li>hosts（测试机器）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/ansible/hosts </span><br><span class="line">[test]</span><br><span class="line">192.168.102.99 #k8s99</span><br></pre></td></tr></table></figure><ul><li><p>command 在远程主机上执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@opsmanager ops]# ansible test -m command -a &quot;ls /tmp&quot;</span><br><span class="line">192.168.102.99 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">ansible_q2JV3u</span><br><span class="line">test.txt</span><br><span class="line">yum.log</span><br></pre></td></tr></table></figure></li><li><p>shell 执行远程机器的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@opsmanager ops]# ansible test -m shell -a &quot;bash /tmp/k8s99.sh&quot;</span><br><span class="line">192.168.102.99 | SUCCESS | rc=0 &gt;</span><br></pre></td></tr></table></figure></li><li><p>script 在远程机器上执行ansible机器的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@opsmanager ops]# ansible test -m script -a &quot;/tmp/ops-manager.sh&quot;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;stderr&quot;: &quot;Shared connection to 192.168.102.99 closed.\r\n&quot;, </span><br><span class="line">    &quot;stdout&quot;: &quot;&quot;, </span><br><span class="line">    &quot;stdout_lines&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>raw 类似command，支持管道传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@opsmanager ops]# ansible test -m raw -a &quot;cat /tmp/test.txt | wc -l&quot;</span><br><span class="line">192.168.102.99 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">2</span><br><span class="line">Shared connection to 192.168.102.99 closed.</span><br></pre></td></tr></table></figure></li><li><p>copy 拷贝ansible机器上文件到远程机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@opsmanager ops]# ll /tmp/ansible.txt </span><br><span class="line">-rw-r--r--. 1 root root 21 Jan 18 14:18 /tmp/ansible.txt</span><br><span class="line">[root@opsmanager ops]# ansible test -m copy -a &quot;src=/tmp/ansible.txt dest=/tmp/ owner=ops group=root mode=0777&quot;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;checksum&quot;: &quot;3f4c1065f5f99153dc0f992c4cbddff01cffd55f&quot;, </span><br><span class="line">    &quot;dest&quot;: &quot;/tmp/ansible.txt&quot;, </span><br><span class="line">    &quot;gid&quot;: 0, </span><br><span class="line">    &quot;group&quot;: &quot;root&quot;, </span><br><span class="line">    &quot;md5sum&quot;: &quot;8033e1095b3dca7e980bc88f39789892&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0777&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;ops&quot;, </span><br><span class="line">    &quot;secontext&quot;: &quot;unconfined_u:object_r:admin_home_t:s0&quot;, </span><br><span class="line">    &quot;size&quot;: 21, </span><br><span class="line">    &quot;src&quot;: &quot;/root/.ansible/tmp/ansible-tmp-1516256563.17-66709211107611/source&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;file&quot;, </span><br><span class="line">    &quot;uid&quot;: 1000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">文件夹</span><br><span class="line">[root@opsmanager files]# ansible test -m copy -a &quot;src=/etc/ansible/files/discounts dest=/usr/local/&quot;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;dest&quot;: &quot;/usr/local/&quot;, </span><br><span class="line">    &quot;src&quot;: &quot;/etc/ansible/files/discounts&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@opsmanager files]# ll -h</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 3 root root 55 Jan 18 16:17 discounts</span><br></pre></td></tr></table></figure></li><li><p>file 操作远程主机文件及文件夹(rescure 递归)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@opsmanager ops]# ansible test -m file -a &quot;dest=/tmp/k8s99 recurse=yes mode=755 owner=ops group=ops&quot;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;gid&quot;: 1000, </span><br><span class="line">    &quot;group&quot;: &quot;ops&quot;, </span><br><span class="line">    &quot;mode&quot;: &quot;0755&quot;, </span><br><span class="line">    &quot;owner&quot;: &quot;ops&quot;, </span><br><span class="line">    &quot;path&quot;: &quot;/tmp/k8s99&quot;, </span><br><span class="line">    &quot;secontext&quot;: &quot;unconfined_u:object_r:user_tmp_t:s0&quot;, </span><br><span class="line">    &quot;size&quot;: 22, </span><br><span class="line">    &quot;state&quot;: &quot;directory&quot;, </span><br><span class="line">    &quot;uid&quot;: 1000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>user 添加删除用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">添加</span><br><span class="line">[root@opsmanager ops]# ansible test -m user -a &quot;name=test group=test  state=present&quot;</span><br><span class="line">192.168.102.99 | FAILED! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;Group test does not exist&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@opsmanager ops]# ansible test -m user -a &quot;name=test  state=present&quot;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;comment&quot;: &quot;&quot;, </span><br><span class="line">    &quot;createhome&quot;: true, </span><br><span class="line">    &quot;group&quot;: 1002, </span><br><span class="line">    &quot;home&quot;: &quot;/home/test&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;shell&quot;: &quot;/bin/bash&quot;, </span><br><span class="line">    &quot;state&quot;: &quot;present&quot;, </span><br><span class="line">    &quot;system&quot;: false, </span><br><span class="line">    &quot;uid&quot;: 1002</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">[root@opsmanager ops]# ansible test -m user -a &quot;name=test  state=absent remove=yes&quot;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;force&quot;: false, </span><br><span class="line">    &quot;name&quot;: &quot;test&quot;, </span><br><span class="line">    &quot;remove&quot;: true, </span><br><span class="line">    &quot;state&quot;: &quot;absent&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yum模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">卸载</span><br><span class="line">ansible test -m yum -a &quot;state=absent name=lrzsz&quot;</span><br><span class="line"></span><br><span class="line">安装</span><br><span class="line">[root@opsmanager ops]# ansible test -m yum -a &quot;state=present name=lrzsz&quot;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;msg&quot;: &quot;&quot;, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &quot;Loaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * epel: mirrors.aliyun.com\n * extras: mirrors.aliyun.com\n * updates: mirrors.aliyun.com\nResolving Dependencies\n--&gt; Running transaction check\n---&gt; Package lrzsz.x86_64 0:0.12.20-36.el7 will be installed\n--&gt; Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package         Arch             Version                  Repository      Size\n================================================================================\nInstalling:\n lrzsz           x86_64           0.12.20-36.el7           base            78 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package\n\nTotal download size: 78 k\nInstalled size: 181 k\nDownloading packages:\nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : lrzsz-0.12.20-36.el7.x86_64                                  1/1 \n  Verifying  : lrzsz-0.12.20-36.el7.x86_64                                  1/1 \n\nInstalled:\n  lrzsz.x86_64 0:0.12.20-36.el7                                                 \n\nComplete!\n&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service 操作远程主机服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动nginx，设置开机启动</span><br><span class="line">ansible test -m service -a &quot;name=nginx state=started enabled=yes&quot;</span><br></pre></td></tr></table></figure></li><li><p>synchronize 文件/文件夹推送，属性与ansible主机一致，需要安装rsync</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@opsmanager tmp]# ansible test -m synchronize -a &quot;src=/tmp/ansible.txt dest=/tmp/ansible.txt&quot;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;cmd&quot;: &quot;/bin/rsync --delay-updates -F --compress --archive --rsh=/bin/ssh -S none -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null --out-format=&lt;&lt;CHANGED&gt;&gt;%i %n%L /tmp/ansible.txt 192.168.102.99:/tmp/ansible.txt&quot;, </span><br><span class="line">    &quot;msg&quot;: &quot;&lt;f.st...... ansible.txt\n&quot;, </span><br><span class="line">    &quot;rc&quot;: 0, </span><br><span class="line">    &quot;stdout_lines&quot;: [</span><br><span class="line">        &quot;&lt;f.st...... ansible.txt&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>cron 计划任务,同一name为一条crontable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">添加</span><br><span class="line">[root@opsmanager tmp]# ansible test -m cron -a &apos;name=&quot;test cron&quot; job=&quot;/bin/bash /tmp/test.sh&quot; minute=*/10 hour=* day=* month=* weekday=*&apos;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;envs&quot;: [], </span><br><span class="line">    &quot;jobs&quot;: [</span><br><span class="line">        &quot;test cron&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">[root@opsmanager tmp]# ansible test -m cron -a &apos;name=&quot;test cron2&quot; job=&quot;/bin/bash /tmp/test.sh&quot; minute=*/20 hour=* day=* month=* weekday=* state=absent&apos;</span><br><span class="line">192.168.102.99 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true, </span><br><span class="line">    &quot;envs&quot;: [], </span><br><span class="line">    &quot;jobs&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible playbook"></a>ansible playbook</h4><ul><li><p>文件列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@opsmanager ansible]# tree .</span><br><span class="line">.</span><br><span class="line">├── ansible.cfg     #ansible配置</span><br><span class="line">├── files       #一些文件</span><br><span class="line">│   ├── discounts  #html</span><br><span class="line">│   │   ├── index.css</span><br><span class="line">│   │   └── index.html</span><br><span class="line">│   └── server.conf #nginx配置</span><br><span class="line">├── hosts  #ansible需要控制的机器列表</span><br><span class="line">├── playbook-test.retry  </span><br><span class="line">├── playbook-test.yml #playbook yml文件</span><br><span class="line">└── roles #</span><br></pre></td></tr></table></figure></li><li><p>hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[test]</span><br><span class="line">192.168.102.99</span><br></pre></td></tr></table></figure></li><li><p>playbook yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test   #指定机器</span><br><span class="line">  vars:         #定义变量</span><br><span class="line">    port: 80</span><br><span class="line">    server: test.chenfan.com</span><br><span class="line">    root: /usr/local/discounts</span><br><span class="line">    index: discounts.html discounts.htm</span><br><span class="line">  remote_user: root  #指定运行的用户(权限)</span><br><span class="line">  tasks:             #任务</span><br><span class="line">  - name: yum the latest apache</span><br><span class="line">    yum: name=nginx state=latest</span><br><span class="line">  - name: copy html to hosts</span><br><span class="line">    copy: src=/etc/ansible/files/discounts dest=/usr/local/</span><br><span class="line">  - name: copy nginx config</span><br><span class="line">    template: src=/etc/ansible/files/server.conf dest=/etc/nginx/conf.d/     #发送带变量的文件</span><br><span class="line">    notify: start nginx</span><br><span class="line">  handlers:</span><br><span class="line">  - name: start nginx</span><br><span class="line">    service: name=nginx state=started</span><br></pre></td></tr></table></figure></li><li><p>server.conf nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    client_max_body_size 10M;</span><br><span class="line">    listen       &#123;&#123;port&#125;&#125;;  #读取template中变量</span><br><span class="line">    server_name &#123;&#123;server&#125;&#125;;</span><br><span class="line">    gzip         on;</span><br><span class="line">    gzip_types   text/plain text/css application/json application/x-javascript text/xml application/xml text/javascript;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      root   &#123;&#123;root&#125;&#125;;</span><br><span class="line">      index  &#123;&#123;index&#125;&#125;;</span><br><span class="line">      autoindex on; # 索引</span><br><span class="line">      autoindex_exact_size on; # 显示文件大小</span><br><span class="line">      autoindex_localtime on; # 显示文件时间</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ansible 无需安装客户端，实现自动化分发&lt;br&gt;主要学习基本模块的使用，playbook的批量执行&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://twitchf.xyz/categories/linux/"/>
    
    
      <category term="ansible" scheme="http://twitchf.xyz/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>harbor部署</title>
    <link href="http://twitchf.xyz/2018/01/25/harbor%E9%83%A8%E7%BD%B2/"/>
    <id>http://twitchf.xyz/2018/01/25/harbor部署/</id>
    <published>2018-01-25T06:47:59.000Z</published>
    <updated>2018-01-25T07:11:13.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>docker-compose</p><p>docker</p><p>harbor离线包</p><h3 id="证书生成"><a href="#证书生成" class="headerlink" title="证书生成"></a>证书生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#mkdir -p /data/cert</span><br><span class="line">#cd /data/cert</span><br><span class="line"></span><br><span class="line">创建CA根证书</span><br><span class="line">#openssl req  -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt -subj &quot;/C=CN/L=wuhan/O=lisea/CN=harbor-registry&quot;</span><br><span class="line"></span><br><span class="line">生成证书签名，访问域名为hun.fjf.com</span><br><span class="line">#openssl req -newkey rsa:4096 -nodes -sha256 -keyout hub.fjf.com.key -out server.csr -subj &quot;/C=CN/L=wuhan/O=lisea/CN=hub.fjf.com&quot;</span><br><span class="line"></span><br><span class="line">生成主机证书</span><br><span class="line">#openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out hub.fjf.com.crt</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改harbor-cfg"><a href="#修改harbor-cfg" class="headerlink" title="修改harbor.cfg"></a>修改harbor.cfg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hostname = hub.fjf.com          # 指定私有仓库的主机名,可以是IP地址，也可以是域名   </span><br><span class="line">ui_url_protocol = https             # 用户访问私仓时使用的协议，默认时http，配置成https</span><br><span class="line">db_password = root123           　　# 指定mysql数据库管理员密码</span><br><span class="line">harbor_admin_password：Harbor12345  # harbor的管理员账户密码</span><br><span class="line">ssl_cert = /data/cert/hub.fjf.com.crt  　　# 设置证书文件路径</span><br><span class="line">ssl_cert_key = /data/cert/hub.fjf.com.key  # 设置证书密钥文件路径</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#./install</span><br></pre></td></tr></table></figure><h3 id="docker客户端访问hub"><a href="#docker客户端访问hub" class="headerlink" title="docker客户端访问hub"></a>docker客户端访问hub</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /etc/docker/certs.d/hub.fjf.com</span><br><span class="line">将hub端创建的ca.crt 拷贝至/etc/docker/certs.d/hub.fjf.com下</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;docker-compose&lt;/p&gt;
&lt;p&gt;docker&lt;/p&gt;
&lt;p&gt;harbor离线包&lt;/p&gt;
&lt;h3 id=&quot;证书生成&quot;&gt;&lt;a href=&quot;#证书生成&quot; class=&quot;headerlink&quot; title=&quot;证书生成&quot;&gt;&lt;/a&gt;证书生成&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#mkdir -p /data/cert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#cd /data/cert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建CA根证书&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#openssl req  -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt -subj &amp;quot;/C=CN/L=wuhan/O=lisea/CN=harbor-registry&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;生成证书签名，访问域名为hun.fjf.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#openssl req -newkey rsa:4096 -nodes -sha256 -keyout hub.fjf.com.key -out server.csr -subj &amp;quot;/C=CN/L=wuhan/O=lisea/CN=hub.fjf.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;生成主机证书&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out hub.fjf.com.crt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="http://twitchf.xyz/categories/docker/"/>
    
    
      <category term="docker" scheme="http://twitchf.xyz/tags/docker/"/>
    
      <category term="hub" scheme="http://twitchf.xyz/tags/hub/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://twitchf.xyz/2018/01/24/hello-world/"/>
    <id>http://twitchf.xyz/2018/01/24/hello-world/</id>
    <published>2018-01-24T06:42:10.496Z</published>
    <updated>2018-01-25T07:11:42.462Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="test" scheme="http://twitchf.xyz/tags/test/"/>
    
  </entry>
  
</feed>
